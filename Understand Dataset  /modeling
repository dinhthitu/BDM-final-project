# -*- coding: utf-8 -*-
"""Model Training with Category Name Mapping"""
import json
import pandas as pd
import shap
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor
from sklearn.model_selection import train_test_split

# Load category mapping
with open('category_ids.json') as f:
    category_data = json.load(f)
    
CATEGORY_MAP = {int(item['id']): item['snippet']['title'] 
               for item in category_data['items']}

def train_and_evaluate(df):
    """Train models and generate insights with category names"""
    # Prepare data
    X = df[['view_count', 'likes', 'comment_count', 'title_length', 'tag_count', 'publish_hour']]
    y = df['hours_to_trend']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Initialize models
    models = {
        "XGBoost": XGBRegressor(random_state=42),
        "LightGBM": LGBMRegressor(random_state=42)
    }
    
    results = {}
    for name, model in models.items():
        model.fit(X_train, y_train)
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X_test)
        
        results[name] = {
            'model': model,
            'explainer': explainer,
            'shap_values': shap_values,
            'feature_importance': pd.Series(np.abs(shap_values).mean(axis=0), index=X.columns)
        }
    
    return results, "LightGBM"  # Default to LightGBM as best model

def generate_category_insights(df, model_results, category_id):
    """Generate insights for specific category"""
    cat_data = df[df['categoryId'] == category_id]
    if len(cat_data) == 0:
        return None
    
    model = model_results['LightGBM']['model']
    explainer = model_results['LightGBM']['explainer']
    
    # Prepare data
    X = cat_data[['view_count', 'likes', 'comment_count', 'title_length', 'tag_count', 'publish_hour']]
    shap_values = explainer.shap_values(X)
    
    # Create feature importance plot
    plt.figure(figsize=(10, 6))
    shap.summary_plot(shap_values, X, plot_type="bar", show=False)
    plt.title(f"Feature Importance for {CATEGORY_MAP.get(category_id, f'Category {category_id}')}")
    plt.tight_layout()
    plt.savefig(f'output/{category_id}_feature_importance.png', dpi=120)
    plt.close()
    
    return {
        'category_name': CATEGORY_MAP.get(category_id, str(category_id)),
        'top_features': pd.DataFrame(shap_values, columns=X.columns)
                       .abs()
                       .mean()
                       .nlargest(3)
                       .to_dict()
    }

if __name__ == "__main__":
    import os
    os.makedirs('output', exist_ok=True)
    
    # Load and process data
    df = pd.read_csv("data/processed_data.csv")
    df['category_name'] = df['categoryId'].map(CATEGORY_MAP)
    
    # Train models
    model_results, best_model = train_and_evaluate(df)
    
    # Example: Generate insights for top 3 categories
    top_categories = df['categoryId'].value_counts().head(3).index
    for cat_id in top_categories:
        insights = generate_category_insights(df, model_results, cat_id)
        if insights:
            print(f"\nInsights for {insights['category_name']}:")
            for feature, score in insights['top_features'].items():
                print(f"- {feature}: {score:.2f}")
