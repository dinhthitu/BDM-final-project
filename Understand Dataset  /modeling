# -*- coding: utf-8 -*-
"""Model Training with SHAP Analysis"""
import numpy as np
import pandas as pd
import shap
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor
from sklearn.metrics import mean_absolute_error

def train_and_evaluate(X_train, X_test, y_train, y_test):
    models = {
        "XGBoost": XGBRegressor(random_state=42),
        "LightGBM": LGBMRegressor(random_state=42)
    }
    
    results = {}
    for name, model in models.items():
        model.fit(X_train, y_train)
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(X_test)
        
        # Tính toán metrics
        mae = mean_absolute_error(y_test, model.predict(X_test))
        shap_std = np.std(shap_values)
        
        results[name] = {
            'model': model,
            'mae': mae,
            'shap_values': shap_values,
            'shap_std': shap_std,
            'feature_impact': pd.Series(np.abs(shap_values).mean(axis=0), index=X.columns)
        }
    
    # Chọn model tốt nhất
    best_model = min(results.items(), key=lambda x: (x[1]['shap_std'], x[1]['mae']))[0]
    
    # Visualization
    plot_shap_comparison(results)
    
    return results, best_model

def plot_shap_comparison(results):
    """Vẽ biểu đồ so sánh SHAP values"""
    fig, axes = plt.subplots(1, 2, figsize=(14, 6))
    for i, (name, res) in enumerate(results.items()):
        res['feature_impact'].sort_values().plot(
            kind='barh', 
            ax=axes[i],
            title=f'{name} Feature Impact (SHAP)'
        )
        axes[i].set_xlabel('Mean Absolute SHAP Value')
    plt.savefig('model_comparison.png', bbox_inches='tight')

if __name__ == "__main__":
    df = pd.read_csv("processed_data.csv")
    X = df[['view_count', 'likes', 'comment_count', 'title_length', 'tag_count', 'publish_hour']]
    y = df['hours_to_trend']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    results, best_model = train_and_evaluate(X_train, X_test, y_train, y_test)
    print(f"\nSelected Model: {best_model}")
    print(f"MAE: {results[best_model]['mae']:.2f} hours")
    print(f"SHAP std: {results[best_model]['shap_std']:.4f}")
