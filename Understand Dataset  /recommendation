# -*- coding: utf-8 -*-
"""Interactive Recommendation System with Category Mapping"""
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from modeling import train_models

# Load category mapping
with open('category_ids.json') as f:
    category_data = json.load(f)
    
CATEGORY_MAP = {int(item['id']): item['snippet']['title'] 
                for item in category_data['items'] 
                if item['snippet']['assignable']}

def load_data():
    """Load processed data with country filter"""
    return pd.read_csv("data/processed_data.csv")

def get_user_input():
    """Get country and category from user with interactive menu"""
    print("\n" + "="*40)
    print("TRENDING VIDEO RECOMMENDATION SYSTEM")
    print("="*40)
    
    # Country input
    country = input("Enter country code (e.g. US, IN, BR): ").upper()
    
    # Category selection menu
    print("\nAvailable categories:")
    for cat_id, cat_name in sorted(CATEGORY_MAP.items()):
        print(f"{cat_id}. {cat_name}")
    
    # Validate input
    while True:
        try:
            category_id = int(input("\nEnter category number: "))
            if category_id in CATEGORY_MAP:
                return country, category_id
            print("‚ö†Ô∏è Invalid category ID. Please try again.")
        except ValueError:
            print("‚ö†Ô∏è Please enter a valid number.")

def generate_recommendation(df, country, category_id):
    """Generate visual and text recommendations"""
    # Filter data
    cat_data = df[(df['country'] == country) & 
                 (df['categoryId'] == category_id)].copy()
    
    if len(cat_data) == 0:
        print(f"\n‚ö†Ô∏è No trending data found for {country} - {CATEGORY_MAP[category_id]}")
        return None
    
    # Train models
    X = cat_data[['view_count', 'likes', 'comment_count', 'title_length', 'tag_count', 'publish_hour']]
    y = cat_data['hours_to_trend']
    model_results = train_models(X, y)
    
    # SHAP analysis
    explainer = model_results['LightGBM']['explainer']
    shap_values = explainer.shap_values(X)
    
    # 1. Feature Importance Plot
    plt.figure(figsize=(10, 6))
    shap.summary_plot(shap_values, X, plot_type="bar", show=False)
    plt.title(f'Top Features for {CATEGORY_MAP[category_id]} in {country}')
    plt.tight_layout()
    plt.savefig(f'output/{country}_{category_id}_feature_impact.png', dpi=120)
    plt.close()
    
    # 2. Best Posting Time Analysis
    plt.figure(figsize=(12, 6))
    time_analysis = cat_data.groupby('publish_hour')['hours_to_trend'].median()
    sns.lineplot(x=time_analysis.index, y=time_analysis.values, 
                 marker='o', color='purple')
    plt.xticks(range(24))
    plt.title(f'Best Posting Time for {CATEGORY_MAP[category_id]} in {country}')
    plt.xlabel('Hour of Day (0-23)')
    plt.ylabel('Average Hours to Trend')
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f'output/{country}_{category_id}_best_time.png', dpi=120)
    plt.close()
    
    # Prepare recommendations
    top_features = pd.DataFrame(shap_values, columns=X.columns).abs().mean().nlargest(3)
    top_tags = cat_data['tags'].str.split('|').explode().value_counts().head(5).index.tolist()
    
    return {
        'country': country,
        'category_id': category_id,
        'category_name': CATEGORY_MAP[category_id],
        'avg_trend_hours': round(cat_data['hours_to_trend'].median(), 1),
        'best_hour': int(time_analysis.idxmin()),
        'optimal_title_length': int(cat_data['title_length'].median()),
        'top_tags': top_tags,
        'key_features': top_features.to_dict()
    }

def display_recommendation(results):
    """Display formatted recommendations"""
    print("\n" + "="*60)
    print(f"üìä TRENDING RECOMMENDATIONS: {results['country']} - {results['category_name']}")
    print("="*60)
    
    print(f"\n‚è±Ô∏è Average Time to Trend: {results['avg_trend_hours']} hours")
    print(f"üïí Best Posting Hour: {results['best_hour']}:00")
    print(f"üìù Optimal Title Length: {results['optimal_title_length']} characters")
    
    print("\nüè∑Ô∏è Top 5 Recommended Tags:")
    for i, tag in enumerate(results['top_tags'], 1):
        print(f"  {i}. {tag}")
    
    print("\nüîë Key Features to Optimize:")
    for feature, score in results['key_features'].items():
        print(f"  - {feature:<15}: Impact Score = {score:.2f}")
    
    print("\nüìà Generated Analysis Charts:")
    print(f"  - Feature Importance: output/{results['country']}_{results['category_id']}_feature_impact.png")
    print(f"  - Best Posting Time: output/{results['country']}_{results['category_id']}_best_time.png")

if __name__ == "__main__":
    import os
    os.makedirs('output', exist_ok=True)
    
    df = load_data()
    country, category_id = get_user_input()
    recommendation = generate_recommendation(df, country, category_id)
    
    if recommendation:
        display_recommendation(recommendation)
