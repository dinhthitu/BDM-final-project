import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. T√≠nh correlation gi·ªØa T·∫§T C·∫¢ features v√† target (hours_to_trend)
if isinstance(X_train, pd.DataFrame):
    # N·∫øu X_train l√† DataFrame
    corr_with_target = pd.DataFrame({
        'Feature': X_train.columns,
        'Correlation_with_Target': [X_train[col].corr(y_train) for col in X_train.columns]
    }).sort_values('Correlation_with_Target', key=abs, ascending=False)
else:
    # N·∫øu X_train l√† numpy array
    corr_with_target = pd.DataFrame({
        'Feature': [f"Feature_{i}" for i in range(X_train.shape[1])],
        'Correlation_with_Target': [np.corrcoef(X_train[:, i], y_train)[0, 1] for i in range(X_train.shape[1])]
    }).sort_values('Correlation_with_Target', key=abs, ascending=False)

# 2. K·∫øt h·ª£p v·ªõi feature importance t·ª´ best model
if hasattr(best_model, 'feature_importances_'):
    corr_with_target['Importance'] = best_model.feature_importances_
elif hasattr(best_model, 'coef_'):
    corr_with_target['Importance'] = np.abs(best_model.coef_.flatten())

# 3. Ch·ªçn feature quan tr·ªçng nh·∫•t (k·∫øt h·ª£p c·∫£ correlation v√† importance)
corr_with_target['Composite_Score'] = (
    corr_with_target['Correlation_with_Target'].abs() * corr_with_target['Importance']
)
top_features = corr_with_target.sort_values('Composite_Score', ascending=False).head(10)

# 4. Visualize k·∫øt qu·∫£
plt.figure(figsize=(12, 6))
sns.barplot(
    x='Composite_Score', 
    y='Feature', 
    data=top_features,
    palette='viridis'
)
plt.title('Top Features Affecting hours_to_trend\n(Correlation + Model Importance)')
plt.xlabel('Combined Importance Score')
plt.tight_layout()
plt.show()

# 5. In ra feature ·∫£nh h∆∞·ªüng m·∫°nh nh·∫•t
most_important_feature = top_features.iloc[0]['Feature']
print(f"\nüîç MOST IMPORTANT FEATURE TO 'hours_to_trend': {most_important_feature}")
print("\nüìä Top 10 Features Summary:")
print(top_features[['Feature', 'Correlation_with_Target', 'Importance', 'Composite_Score']])
